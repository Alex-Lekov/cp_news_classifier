[
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "yaml",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "yaml",
        "description": "yaml",
        "detail": "yaml",
        "documentation": {}
    },
    {
        "label": "Model",
        "importPath": "model",
        "description": "model",
        "isExtraImport": true,
        "detail": "model",
        "documentation": {}
    },
    {
        "label": "compress",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "compress",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "load_model",
        "importPath": "tensorflow.keras.models",
        "description": "tensorflow.keras.models",
        "isExtraImport": true,
        "detail": "tensorflow.keras.models",
        "documentation": {}
    },
    {
        "label": "DistilBertTokenizerFast",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "TFDistilBertForSequenceClassification",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "DistilBertConfig",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "DistilBertTokenizerFast",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "tensorflow",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tensorflow",
        "description": "tensorflow",
        "detail": "tensorflow",
        "documentation": {}
    },
    {
        "label": "tensorflow_addons",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tensorflow_addons",
        "description": "tensorflow_addons",
        "detail": "tensorflow_addons",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "Model",
        "importPath": "kattana_news.model",
        "description": "kattana_news.model",
        "isExtraImport": true,
        "detail": "kattana_news.model",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "InputDoc",
        "kind": 6,
        "importPath": "kattana_news.main",
        "description": "kattana_news.main",
        "peekOfCode": "class InputDoc(BaseModel):\n    text: str\nclass LabeledDoc(InputDoc):\n    label: list\n@app.get(\"/\")\ndef root():\n    return {\"message\": \"Hello World\"}\n@app.post(\"/predict\", response_model=LabeledDoc, status_code=200)\ndef predict(doc: InputDoc):\n    \"\"\"",
        "detail": "kattana_news.main",
        "documentation": {}
    },
    {
        "label": "LabeledDoc",
        "kind": 6,
        "importPath": "kattana_news.main",
        "description": "kattana_news.main",
        "peekOfCode": "class LabeledDoc(InputDoc):\n    label: list\n@app.get(\"/\")\ndef root():\n    return {\"message\": \"Hello World\"}\n@app.post(\"/predict\", response_model=LabeledDoc, status_code=200)\ndef predict(doc: InputDoc):\n    \"\"\"\n    Help from https://testdriven.io/blog/fastapi-machine-learning/\n    \"\"\"",
        "detail": "kattana_news.main",
        "documentation": {}
    },
    {
        "label": "load_config",
        "kind": 2,
        "importPath": "kattana_news.main",
        "description": "kattana_news.main",
        "peekOfCode": "def load_config(config_name: str = \"config.yaml\") -> Dict:\n    \"\"\"Load Config file\n    Args:\n        config_name (str, optional): file name. Defaults to \"config.yaml\".\n    Returns:\n        Dict: config\n    \"\"\"\n    with open(config_name, \"r\") as stream:\n        try:\n            config = yaml.safe_load(stream)",
        "detail": "kattana_news.main",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 2,
        "importPath": "kattana_news.main",
        "description": "kattana_news.main",
        "peekOfCode": "def root():\n    return {\"message\": \"Hello World\"}\n@app.post(\"/predict\", response_model=LabeledDoc, status_code=200)\ndef predict(doc: InputDoc):\n    \"\"\"\n    Help from https://testdriven.io/blog/fastapi-machine-learning/\n    \"\"\"\n    text = doc.text\n    text_tegs = list(compress(model_config[\"TEGS\"], (model.predict_proba(text) > 0.5)[0]))\n    print(f\"Labeles: {text_tegs}\")",
        "detail": "kattana_news.main",
        "documentation": {}
    },
    {
        "label": "predict",
        "kind": 2,
        "importPath": "kattana_news.main",
        "description": "kattana_news.main",
        "peekOfCode": "def predict(doc: InputDoc):\n    \"\"\"\n    Help from https://testdriven.io/blog/fastapi-machine-learning/\n    \"\"\"\n    text = doc.text\n    text_tegs = list(compress(model_config[\"TEGS\"], (model.predict_proba(text) > 0.5)[0]))\n    print(f\"Labeles: {text_tegs}\")\n    return {\"text\": text, \"label\": text_tegs}\n########################## MAIN ###############################\nif __name__ == \"__main__\":",
        "detail": "kattana_news.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "kattana_news.main",
        "description": "kattana_news.main",
        "peekOfCode": "app = FastAPI()\nclass InputDoc(BaseModel):\n    text: str\nclass LabeledDoc(InputDoc):\n    label: list\n@app.get(\"/\")\ndef root():\n    return {\"message\": \"Hello World\"}\n@app.post(\"/predict\", response_model=LabeledDoc, status_code=200)\ndef predict(doc: InputDoc):",
        "detail": "kattana_news.main",
        "documentation": {}
    },
    {
        "label": "Model",
        "kind": 6,
        "importPath": "kattana_news.model",
        "description": "kattana_news.model",
        "peekOfCode": "class Model(object):\n    \"\"\"\n    main model class, loading weights and predict\n    \"\"\"\n    def __init__(\n        self,\n        file_model_name: str = \"model.h5\",\n        max_length: int = 50,\n        model_name: str = \"distilbert-base-uncased\",\n    ) -> None:",
        "detail": "kattana_news.model",
        "documentation": {}
    },
    {
        "label": "multi_label_accuracy",
        "kind": 2,
        "importPath": "kattana_news.model",
        "description": "kattana_news.model",
        "peekOfCode": "def multi_label_accuracy(y_true: tf.Tensor, y_pred: tf.Tensor) -> tf.Tensor:\n    \"\"\"For multi-label classification, one has to define a custom\n    acccuracy function because neither tf.keras.metrics.Accuracy nor\n    tf.keras.metrics.CategoricalAccuracy evaluate the number of\n    exact matches.\n    :Example:\n    >>> from tensorflow.keras import metrics\n    >>> y_true = tf.convert_to_tensor([[1., 1.]])\n    >>> y_pred = tf.convert_to_tensor([[1., 0.]])\n    >>> metrics.Accuracy()(y_true, y_pred).numpy()",
        "detail": "kattana_news.model",
        "documentation": {}
    },
    {
        "label": "test_model",
        "kind": 2,
        "importPath": "tests.test_model",
        "description": "tests.test_model",
        "peekOfCode": "def test_model():\n    TEGS = [\n        \"release_points\",\n        \"technical_update_points\",\n        \"partnership_points\",\n        \"listing_points\",\n        \"security_points\",\n        \"from_the_project\",\n        \"not_from_the_project\",\n        \"staking\",",
        "detail": "tests.test_model",
        "documentation": {}
    },
    {
        "label": "test_service",
        "kind": 2,
        "importPath": "tests.test_service",
        "description": "tests.test_service",
        "peekOfCode": "def test_service():\n    \"\"\"RUN docker-compose up before launch\"\"\"\n    data = '{\"text\":\"@LuckyBartlett We ll be releasing details soon, including for those who held LP tokens, apologies for the delay\"}'\n    result = requests.post(\n        url=\"http://0.0.0.0:8008/predict\",\n        data=data,\n        headers={\"Content-Type\": \"application/json\"},\n    )\n    assert result.json()[\"label\"] is not None\n    # assert result.json()['label'] is not [\"technical_update_points\"]",
        "detail": "tests.test_service",
        "documentation": {}
    },
    {
        "label": "packages",
        "kind": 5,
        "importPath": "setup",
        "description": "setup",
        "peekOfCode": "packages = \\\n['kattana_news']\npackage_data = \\\n{'': ['*']}\ninstall_requires = \\\n['pandas>=1.4.1,<2.0.0']\nsetup_kwargs = {\n    'name': 'kattana-news',\n    'version': '21.3.16',\n    'description': 'Model news classification',",
        "detail": "setup",
        "documentation": {}
    },
    {
        "label": "package_data",
        "kind": 5,
        "importPath": "setup",
        "description": "setup",
        "peekOfCode": "package_data = \\\n{'': ['*']}\ninstall_requires = \\\n['pandas>=1.4.1,<2.0.0']\nsetup_kwargs = {\n    'name': 'kattana-news',\n    'version': '21.3.16',\n    'description': 'Model news classification',\n    'long_description': None,\n    'author': 'Alex-Lekov',",
        "detail": "setup",
        "documentation": {}
    },
    {
        "label": "install_requires",
        "kind": 5,
        "importPath": "setup",
        "description": "setup",
        "peekOfCode": "install_requires = \\\n['pandas>=1.4.1,<2.0.0']\nsetup_kwargs = {\n    'name': 'kattana-news',\n    'version': '21.3.16',\n    'description': 'Model news classification',\n    'long_description': None,\n    'author': 'Alex-Lekov',\n    'author_email': '61644712+Alex-Lekov@users.noreply.github.com',\n    'maintainer': None,",
        "detail": "setup",
        "documentation": {}
    },
    {
        "label": "setup_kwargs",
        "kind": 5,
        "importPath": "setup",
        "description": "setup",
        "peekOfCode": "setup_kwargs = {\n    'name': 'kattana-news',\n    'version': '21.3.16',\n    'description': 'Model news classification',\n    'long_description': None,\n    'author': 'Alex-Lekov',\n    'author_email': '61644712+Alex-Lekov@users.noreply.github.com',\n    'maintainer': None,\n    'maintainer_email': None,\n    'url': None,",
        "detail": "setup",
        "documentation": {}
    }
]